1. Basic Function
2. Conversions
3. Next Permutation
4. Sliding Window
5. Hashing
6. Substring Hashing
7. KMP Algorithm


1. Basic Function
-----------------
1. size()
2. sort()
3. reverse()
4. substr()
5. getline()
6. toupper()
7. tolower()
8. istringstream()
9. erase()
10. push_back()
11. pop_back()



2. Conversions
--------------
1. String to number
2. Number to string



3. Next Permutation
-------------------
It will provide all permutations of any given string.
N.B: Array must be sorted!!!

If the length of the string is s, then the number of permutations = n!


5. Hashing
----------
String will be converted to integer using hashing.
String comparison becomes O(1) while traditional matching techniques takes O(n) time complexity.

Hash (s) = (s[0] * p^(n - 1) + s[1] * p^(n - 2) + ..... + s[n - 1] * A^0) mod B
where, 
        s[0], s[1],...., s[n] are characters of the string
        A, B are chosen constants which are usually prime numbers.

